
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model articles {
  id              String      @id @default(dbgenerated("gen_random_uuid()"))
  externalid      String
  title           String
  url             String
  author          String?
  publishedat     DateTime    @db.Timestamptz(6)
  likes           Int?        @default(0)
  sourceid        String
  categoryid      String?
  translatedtitle String?
  bookmarkcount   Int?        @default(0)
  expiresat       DateTime?   @db.Timestamptz(6)
  createdat       DateTime?   @default(now()) @db.Timestamptz(6)
  updatedat       DateTime?   @default(now()) @db.Timestamptz(6)
  categories      categories? @relation(fields: [categoryid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sources         sources     @relation(fields: [sourceid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookmarks       bookmarks[]

  @@unique([sourceid, externalid])
}

model bookmarks {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  userid    String
  articleid String
  createdat DateTime? @default(now()) @db.Timestamptz(6)
  articles  articles  @relation(fields: [articleid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userid, articleid])
}

model categories {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  name      String     @unique
  createdat DateTime?  @default(now()) @db.Timestamptz(6)
  updatedat DateTime?  @default(now()) @db.Timestamptz(6)
  articles  articles[]
}

model fetchlogs {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  sourceid      String?
  status        String
  message       String?
  articlescount Int?      @default(0)
  startedat     DateTime  @db.Timestamptz(6)
  completedat   DateTime? @db.Timestamptz(6)
  createdat     DateTime? @default(now()) @db.Timestamptz(6)
  sources       sources?  @relation(fields: [sourceid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sources {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  name        String      @unique
  apiendpoint String?
  enabled     Boolean?    @default(true)
  createdat   DateTime?   @default(now()) @db.Timestamptz(6)
  updatedat   DateTime?   @default(now()) @db.Timestamptz(6)
  articles    articles[]
  fetchlogs   fetchlogs[]
}

model subscriptions {
  id                   String    @id @default(dbgenerated("gen_random_uuid()"))
  userid               String    @unique
  stripecustomerid     String?
  stripesubscriptionid String?
  plan                 String?   @default("free")
  status               String?   @default("active")
  expiresat            DateTime? @db.Timestamptz(6)
  createdat            DateTime? @default(now()) @db.Timestamptz(6)
  updatedat            DateTime? @default(now()) @db.Timestamptz(6)
  users                users     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model userpreferences {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  userid            String    @unique
  articlespersource Int?      @default(5)
  darkmode          Boolean?  @default(false)
  createdat         DateTime? @default(now()) @db.Timestamptz(6)
  updatedat         DateTime? @default(now()) @db.Timestamptz(6)
  users             users     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id              String           @id @default(dbgenerated("gen_random_uuid()"))
  clerkid         String           @unique
  email           String           @unique
  name            String?
  imageurl        String?
  createdat       DateTime?        @default(now()) @db.Timestamptz(6)
  updatedat       DateTime?        @default(now()) @db.Timestamptz(6)
  bookmarks       bookmarks[]
  subscriptions   subscriptions?
  userpreferences userpreferences?
}
